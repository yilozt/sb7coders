diff --git a/test.rs b/test.rs
index a9c72e9..dc7f528 100644
--- a/test.rs
+++ b/test.rs
@@ -1,4 +1,6 @@
-use gl::types::*;
+use std::ffi::CString;
+
+use gl::{types::*, CreateProgram};
 use sb7::application::Application;
 use sb7::utils::*;
 
@@ -9,95 +11,70 @@ struct App {
 
 impl Application for App {
   fn startup(&mut self) {
-    let vs = "#version 460 core
-    uniform TransformBlock {
-      float scale;
-      vec3 translation;
-      float rotate[3];
-      mat4 projection_matrix;
-    } transforms;
+    unsafe {
+      let vs_source = CString::new(
+        "
+        #version 460 core
+        
+        uniform Harry {
+          float a;
+          mat4 b;
+        };
 
-    void main() {
-      gl_Position =  transforms.projection_matrix * vec4(0.0);
-    }";
+        uniform Bob {
+          int c;
+          ivec4 d;
+        };
 
-    let fs = "#version 460 core
-    out vec4 color;
-    void main() {
-      color = vec4(1.0);
-    }";
+        uniform Susan {
+          mat4 e[10];
+        };
 
-    let program = program(&[shader(gl::VERTEX_SHADER, vs),
-                            shader(gl::FRAGMENT_SHADER, fs)]);
-    // 查询 uniform 成员的下标
-    use std::ffi::CString;
-    let uniform_names = [CString::new("TransformBlock.rotate"),
-                         CString::new("TransformBlock.scale"),
-                         CString::new("TransformBlock.translation"),
-                         CString::new("TransformBlock.projection_matrix")];
-    let uniform_names = uniform_names.map(|s| s.unwrap().into_raw());
-    let mut uniform_indices = [0u32; 4];
-    unsafe {
-      gl::GetUniformIndices(program, 4, uniform_names.as_ptr() as _,
-                            uniform_indices.as_mut_ptr());
-      let _ = uniform_names.map(|s| CString::from_raw(s)); // 回收内存
-    }
+        void main() { }  
+        ",
+      )
+      .unwrap();
+      let vs = gl::CreateShader(gl::VERTEX_SHADER);
+      gl::ShaderSource(vs, 1, &vs_source.as_ptr(), std::ptr::null());
+      gl::CompileShader(vs);
 
-    // 查询 uniform 成员的内存起始位置，数组元素大小
-    let mut uniform_offsets = [0; 4];
-    let mut arr_strides = [0; 4];
-    let mut mat_strides = [0; 4];
-    unsafe {
-      gl::GetActiveUniformsiv(program, 4, uniform_indices.as_ptr(),
-                              gl::UNIFORM_OFFSET,
-                              uniform_offsets.as_mut_ptr());
-      gl::GetActiveUniformsiv(program, 4, uniform_indices.as_ptr(),
-                              gl::UNIFORM_ARRAY_STRIDE,
-                              arr_strides.as_mut_ptr());
-      gl::GetActiveUniformsiv(program, 4, uniform_indices.as_ptr(),
-                              gl::UNIFORM_MATRIX_STRIDE,
-                              mat_strides.as_mut_ptr())
-    }
+      let fs_source = CString::new(
+        "
+        #version 460 core
+        out vec4 color;
+        void main() {
+          color = vec4(1.0);
+        }
+        ",
+      )
+      .unwrap();
+      let fs = gl::CreateShader(gl::FRAGMENT_SHADER);
+      gl::ShaderSource(fs, 1, &fs_source.as_ptr(), std::ptr::null());
+      gl::CompileShader(fs);
 
-    // 在堆上分配一块内存，用来将存储数据
-    let data = Box::new([0u8; 4096]);
-    let ptr =  data.as_ptr();
+      let program = gl::CreateProgram();
+      gl::AttachShader(program, vs);
+      gl::AttachShader(program, fs);
+      gl::LinkProgram(program);
+      gl::DeleteShader(vs);
+      gl::DeleteShader(fs);
 
-    unsafe {
-      let offset = uniform_offsets[1] as usize;
-      *(ptr.add(offset) as *mut f32) = 3.0f32;
-    }
+      let mut bufs = [0u32; 3];
+      gl::CreateBuffers(3, bufs.as_mut_ptr());
+      let [buf_a, buf_b, buf_c] = bufs;
 
-    // 更新 vec3: translation
-    unsafe {
-      let offset = uniform_offsets[2] as usize;
-      *(ptr.add(offset) as *mut f32).add(0) = 1.0f32;
-      *(ptr.add(offset) as *mut f32).add(1) = 2.0f32;
-      *(ptr.add(offset) as *mut f32).add(2) = 3.0f32;
-    }
+      let [harry_index, bob_index, susan_index] = ["Harry", "Bob", "Susan"]
+        .map(|s| CString::new(s).unwrap())
+        .map(|s| gl::GetUniformBlockIndex(program, s.as_ptr()));
 
-    //  更新 rotate 数组
-    let rotates: [f32; 3] = [30.0, 40.0, 50.0];
-    unsafe {
-      let mut offset = uniform_offsets[0] as usize;
-      for i in 0..3 {
-        *(ptr.add(offset) as *mut f32) = rotates[i];
-        offset += arr_strides[0] as usize;
-      }
-    }
+      gl::UniformBlockBinding(program, harry_index, 1);
+      gl::BindBufferBase(gl::UNIFORM_BLOCK, 1, buf_c);
+
+      gl::UniformBlockBinding(program, bob_index, 3);
+      gl::BindBufferBase(gl::UNIFORM_BLOCK, 3, buf_a);
 
-    // 更新 matrix
-    let mat : [f32; 16]=  [ 1.0, 2.0, 3.0, 4.0,
-                            9.0, 8.0, 7.0, 6.0,
-                            2.0, 4.0, 6.0, 8.0,
-                            1.0, 3.0, 5.0, 7.0 ];
-    for i in 0..4 {
-      let mut offset = uniform_offsets[3] as usize
-                     + mat_strides[3] as usize * i;
-      for j in 0..4 {
-        unsafe { *(ptr.add(offset) as *mut f32) = mat[i * 4 + j] };
-        offset += std::mem::size_of::<f32>();
-      }
+      gl::UniformBlockBinding(program, susan_index, 0);
+      gl::BindBufferBase(gl::UNIFORM_BLOCK, buf_b, 0);
     }
   }
   fn shutdown(&mut self) {
